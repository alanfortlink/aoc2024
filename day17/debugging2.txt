0 # 2 4 | B = A % 8
1 # 1 5 | B = B xor 5
2 # 7 5 | C = A / 2^B
3 # 0 3 | A = A / 2^3
4 # 1 6 | B = B xor 6
5 # 4 3 | B = B xor C
6 # 5 5 | out(B % 8)
7 # 3 0 | JMP 0

(((((A / (8 ^ 0)) % 8) xor 5) xor 6) xor ((A / (8 ^ 0)) / 2^(((A / (8 ^ 0)) % 8) xor 5))) % 8 = 2
(((((A / (8 ^ 1)) % 8) xor 5) xor 6) xor ((A / (8 ^ 1)) / 2^(((A / (8 ^ 1)) % 8) xor 5))) % 8 = 4
(((((A / (8 ^ 2)) % 8) xor 5) xor 6) xor ((A / (8 ^ 2)) / 2^(((A / (8 ^ 2)) % 8) xor 5))) % 8 = 1
(((((A / (8 ^ 3)) % 8) xor 5) xor 6) xor ((A / (8 ^ 3)) / 2^(((A / (8 ^ 3)) % 8) xor 5))) % 8 = 5
(((((A / (8 ^ 4)) % 8) xor 5) xor 6) xor ((A / (8 ^ 4)) / 2^(((A / (8 ^ 4)) % 8) xor 5))) % 8 = 7
(((((A / (8 ^ 5)) % 8) xor 5) xor 6) xor ((A / (8 ^ 5)) / 2^(((A / (8 ^ 5)) % 8) xor 5))) % 8 = 5
(((((A / (8 ^ 6)) % 8) xor 5) xor 6) xor ((A / (8 ^ 6)) / 2^(((A / (8 ^ 6)) % 8) xor 5))) % 8 = 0
(((((A / (8 ^ 7)) % 8) xor 5) xor 6) xor ((A / (8 ^ 7)) / 2^(((A / (8 ^ 7)) % 8) xor 5))) % 8 = 3
(((((A / (8 ^ 8)) % 8) xor 5) xor 6) xor ((A / (8 ^ 8)) / 2^(((A / (8 ^ 8)) % 8) xor 5))) % 8 = 1
(((((A / (8 ^ 9)) % 8) xor 5) xor 6) xor ((A / (8 ^ 9)) / 2^(((A / (8 ^ 9)) % 8) xor 5))) % 8 = 6
(((((A / (8 ^ 10)) % 8) xor 5) xor 6) xor ((A / (8 ^ 10)) / 2^(((A / (8 ^ 10)) % 8) xor 5))) % 8 = 4
(((((A / (8 ^ 11)) % 8) xor 5) xor 6) xor ((A / (8 ^ 11)) / 2^(((A / (8 ^ 11)) % 8) xor 5))) % 8 = 3
(((((A / (8 ^ 12)) % 8) xor 5) xor 6) xor ((A / (8 ^ 12)) / 2^(((A / (8 ^ 12)) % 8) xor 5))) % 8 = 5
(((((A / (8 ^ 13)) % 8) xor 5) xor 6) xor ((A / (8 ^ 13)) / 2^(((A / (8 ^ 13)) % 8) xor 5))) % 8 = 5
(((((A / (8 ^ 14)) % 8) xor 5) xor 6) xor ((A / (8 ^ 14)) / 2^(((A / (8 ^ 14)) % 8) xor 5))) % 8 = 3
(((((A / (8 ^ 15)) % 8) xor 5) xor 6) xor ((A / (8 ^ 15)) / 2^(((A / (8 ^ 15)) % 8) xor 5))) % 8 = 0
